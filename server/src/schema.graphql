scalar DateTime
scalar ErrorRate

type Query {
  "Spotify catalog information for an album."
  album(id: ID!): Album

  "Spotify catalog information for an artist."
  artist(id: ID!): Artist

  """
  A list of available genres seed parameter values for
  [recommendations](https://developer.spotify.com/documentation/web-api/reference/#/operations/get-recommendations).
  """
  genres: [String!]!

  """
  Recommendations for the current user.

  Recommendations are generated based on the available information for a given
  seed entity and matched against similar artists and tracks. If there is
  sufficient information about the provided seeds, a list of tracks will be
  returned together with pool size details.

  For artists and tracks that are very new or obscure there might not be enough
  data to generate a list of tracks.
  """
  recommendations(seeds: RecommendationSeedInput!): Recommendations

  """
  Information about the current logged-in user.
  """
  me: CurrentUser

  """
  A playlist owned by a Spotify user.
  """
  playlist(id: ID!): Playlist

  """
  A list of Spotify featured playlists (shown, for example, on a Spotify
  player's 'Browse' tab).
  """
  featuredPlaylists(
    """
    The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int

    """
    The index of the first playlist to return. Default: 0 (the first object).

    Use with `limit` to get the next set of playlists.
    """
    offset: Int

    """
    Specify the local time to get results tailored for that specific date and
    time in the day. If not provided, the response defaults to the current UTC
    time. If there were no featured playlists (or there is no data) at the
    specified time, the response will revert to the current UTC time.
    """
    timestamp: DateTime
  ): FeaturedPlaylistConnection
}

type Mutation {
  """
  Update configuration for a field in the schema. Allows tweaks to the
  synthetic timeouts and error rates associated with the field. By default, both
  the timeout and error rate are set to 0.
  """
  updateFieldConfig(
    config: FieldConfigInput!
    field: FieldInput!
  ): UpdateFieldConfigResponse

  """
  Reset a field's config back to its default values.
  """
  resetFieldConfig(field: FieldInput!): ResetFieldConfigResponse
}

type UpdateFieldConfigResponse {
  """
  The updated field config
  """
  fieldConfig: FieldConfig
}

type ResetFieldConfigResponse {
  """
  The updated field config
  """
  fieldConfig: FieldConfig
}

type FieldConfig {
  # TODO: Add support for paths
  # paths: [[String!]!]

  """
  The schema field that includes this config
  """
  schemaField: SchemaField!

  """
  The synthetic timeout configured for the field.
  """
  timeout: Int!

  """
  The synthetic error rate configured for the field.
  """
  errorRate: ErrorRate!
}

type SchemaField {
  """
  The parent type name in the schema (ex: `User`)
  """
  typename: String!

  """
  The name of the field in the type (ex: `firstName`)
  """
  fieldName: String!
}

input FieldInput {
  # """
  # Configure a field by its path in a query. This allows a specific point in a
  # query to behave a particular way rather than all fields of a particular type.
  # This should be an array of strings.
  #
  # One of `path` or `schema` is required. If both are provided, `schema` will
  # take precendence as it has broader impact.
  # """
  # TODO: Add support for paths
  # path: [String!]

  """
  Configure a field by its type in the schema. This will apply the config to all
  fields of the given type regardless of where it is queried in the scheam.

  One of `path` or `schema` is required. If both are provided, `schema` will
  take precendence as it has broader impact.
  """
  schemaField: SchemaFieldInput
}

input FieldConfigInput {
  """
  The synthetic timeout configured for a field. Set to `null` to reset the value
  back to its default. Omit this field to maintain its value. Defaults to `0`.
  """
  timeout: Int

  """
  The synthetic error rate configured for a field. This should be a value
  between `0` and `1` where `0` means no synthetic errors should be thrown and
  `1` means errors should be thrown 100% of the time. Set to `null` to reset the
  value back to its default. Omit this field to maintain its value. Defaults to
  `0`.
  """
  errorRate: ErrorRate
}

input SchemaFieldInput {
  """
  The parent type name in the schema (ex: `User`)
  """
  typename: String!

  """
  The name of the field in the type (ex: `firstName`)
  """
  fieldName: String!
}

"Spotify catalog information for an album."
type Album {
  "The type of the album."
  albumType: AlbumType!

  "The artists of the album."
  artists: [Artist!]!

  """
  Known external URLs for this album.
  """
  externalUrls: ExternalUrl!

  """
  Genres for the album.
  """
  genres: [String!]!

  """
  A link to the Web API endpoint providing full details of the album.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the album.
  """
  id: ID!

  """
  The cover art for the album in various sizes, widest first.
  """
  images: [Image!]!

  "The label the album was released under."
  label: String

  """
  The name of the album. In case of an album takedown, the value may be an empty
  string.
  """
  name: String!

  """
  The date the album was first released.
  """
  releaseDate: ReleaseDate!

  "The number of tracks in the album."
  totalTracks: Int!

  """
  The tracks of the album.
  """
  tracks: AlbumTrackConnection

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the album.
  """
  uri: String!
}

type AlbumTrackConnection {
  "The set of tracks."
  edges: [AlbumTrackEdge!]!

  "Pagination information for the set of tracks."
  pageInfo: PageInfo!
}

type AlbumTrackEdge {
  "The track on the album"
  node: Track!
}

enum AlbumType {
  ALBUM
  SINGLE
  COMPILATION
}

"""
Spotify catalog information for an artist.
"""
type Artist {
  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the artist.
  """
  id: ID!

  """
  Known external URLs for this artist.
  """
  externalUrls: ExternalUrl!

  """
  The name of the artist.
  """
  name: String!

  """
  A link to the Web API endpoint providing full details of the artist.
  """
  href: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the artist.
  """
  uri: String
}

type CurrentUser {
  """
  Detailed profile information about the current user.
  """
  user: User!

  """
  Playlists owned or followed by the current Spotify user.
  """
  playlists(
    """
    The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int

    """
    The index of the first playlist to return. Default: 0 (the first object).
    Maximum offset: 100.000.

    Use with `limit` to get the next set of playlists.
    """
    offset: Int
  ): PlaylistConnection
}

"Spotify catalog information for an episode."
type Episode implements PlaylistTrack {
  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the episode.
  """
  id: ID!

  """
  A URL to a 30 second preview (MP3 format) of the episode. `null` if not available.
  """
  audioPreviewUrl: String

  "A description of the episode"
  description(format: TextFormat = PLAIN): String!

  "The episode length in milliseconds."
  durationMs: Int!

  """
  Whether or not the episode has explicit content (`true` = yes it does;
  `false` = no it does not OR unknown).
  """
  explicit: Boolean!

  """
  External URLs for this episode.
  """
  externalUrls: ExternalUrl!

  "A link to the Web API endpoint providing full details of the episode."
  href: String!

  """
  The cover art for the episode in various sizes, widest first.
  """
  images: [Image!]!

  """
  `true` if the episode is hosted outside of Spotify's CDN.
  """
  isExternallyHosted: Boolean!

  """
  `true` if the episode is playable in the given market. Otherwise `false`.
  """
  isPlayable: Boolean!

  """
  A list of the languages used in the episode, identified by their
  [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code.
  """
  languages: [String!]!

  """
  The name of the episode.
  """
  name: String!

  """
  The date the episode was first released
  """
  releaseDate: ReleaseDate

  """
  The show containing the episode.
  """
  show: Show!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the episode.
  """
  uri: String!
}

type ExternalUrl {
  """
  The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the object.
  """
  spotify: String
}

type FeaturedPlaylistConnection {
  message: String!

  """
  A list of Spotify featured playlists (shown, for example, on a Spotify player's
  'Browse' tab).
  """
  edges: [FeaturedPlaylistEdge!]!

  "Pagination information for the set of playlists"
  pageInfo: PageInfo!
}

type FeaturedPlaylistEdge {
  node: Playlist!
}

type Followers {
  "The total number of followers."
  total: Int!
}

type Image {
  """
  The source URL of the image.
  """
  url: String!

  """
  The image height in pixels.
  """
  height: Int

  """
  The image width in pixels.
  """
  width: Int
}

type PageInfo {
  "Whether there is a next page of items."
  hasNextPage: Boolean!

  "Whether there is a previous page of items."
  hasPreviousPage: Boolean!

  """
  The maximum number of items in the response (as set in the query or default)
  """
  limit: Int!

  "The offset of the items returned (as set in the query or default)"
  offset: Int!

  "The total number of items returned for the page."
  total: Int!
}

"Information about a playlist owned by a Spotify user"
type Playlist {
  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the playlist.
  """
  id: ID!

  """
  `true` if the owner allows other users to modify the playlist.
  """
  collaborative: Boolean!

  """
  The playlist description. _Only returned for modified, verified playlists,
  otherwise `null`_.
  """
  description: String

  """
  Known external URLs for this playlist.
  """
  externalUrls: ExternalUrl!

  """
  Images for the playlist. The array may be empty or contain up to three images.
  The images are returned by size in descending order.
  See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).
  **Note**: If returned, the source URL for the image (`url`) is temporary and
  will expire in less than a day.
  """
  images: [Image!]!

  """
  The name of the playlist.
  """
  name: String!

  """
  The user who owns the playlist.
  """
  owner: User!

  """
  The playlist's public/private status: `true` the playlist is public, `false`
  the playlist is private, `null` the playlist status is not relevant. For more
  about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)
  """
  public: Boolean

  "The tracks of the playlist."
  tracks(
    """
    The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
    """
    limit: Int

    """
    The index of the first item to return. Default: 0 (the first item).

    Use with `limit` to get the next set of items.
    """
    offset: Int
  ): PlaylistTrackConnection!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) */
  for the playlist.
  """
  uri: String!
}

"A paged set of playlists"
type PlaylistConnection {
  "The set of playlists."
  edges: [PlaylistEdge!]!

  "Pagination information for the set of playlists"
  pageInfo: PageInfo!
}

type PlaylistEdge {
  "The playlist"
  node: Playlist!
}

"A paged set of tracks for a playlist"
type PlaylistTrackConnection {
  "Pagination information for the tracks belonging to a playlist"
  edges: [PlaylistTrackEdge!]!

  "Pagination information for the tracks belonging to a playlist"
  pageInfo: PageInfo!
}

type PlaylistTrackEdge {
  "The date and time the track was added to the playlist"
  addedAt: DateTime

  "The user that added the track to the playlist"
  addedBy: User!

  "The playlist track"
  node: PlaylistTrack!
}

interface PlaylistTrack {
  "The playlist track length in milliseconds."
  durationMs: Int!

  """
  External URLs for this episode.
  """
  externalUrls: ExternalUrl!

  "A link to the Web API endpoint providing full details of the episode."
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the playlist track.
  """
  id: ID!

  """
  The name of the episode.
  """
  name: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the playlist track.
  """
  uri: String!
}

"Information about recommendations for the current user"
type Recommendations {
  """
  An array of recommendation [seed objects](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject).
  """
  seeds: [RecommendationSeed!]!

  """
  An array of [track object (simplified)](https://developer.spotify.com/documentation/web-api/reference/#object-simplifiedtrackobject)
  ordered according to the parameters supplied.
  """
  tracks: [Track!]!
}

"""
Information about a recommendation [seed object](https://developer.spotify.com/documentation/web-api/reference/#object-recommendationseedobject).
"""
type RecommendationSeed {
  """
  The id used to select this seed. This will be the same as the string used in
  the `seedArtists`, `seedTracks` or `seedGenres` parameter.
  """
  id: ID!

  """
  The number of tracks available after min_* and max_* filters have been
  applied.
  """
  afterFilteringSize: Int!

  "The number of tracks available after relinking for regional availability."
  afterRelinkingSize: Int!

  """
  A link to the full track or artist data for this seed. For tracks this will
  be a link to a [Track Object](https://developer.spotify.com/documentation/web-api/reference/#object-trackobject).
  For artists a link to an [Artist Object](https://developer.spotify.com/documentation/web-api/reference/#object-artistobject).
  For genre seeds, this value will be `null`.
  """
  href: String

  "The number of recommended tracks available for this seed."
  initialPoolSize: Int!

  "The entity type of this seed."
  type: RecommendationSeedType!
}

"Available entity types for recommendation seeds."
enum RecommendationSeedType {
  ARTIST
  TRACK
  GENRE
}

type ReleaseDate {
  """
  The date the item was first released, for example `1981-12-15`. Depending on
  the precision, it might be shown as `1981-12`, or `1981-12-15`.
  """
  date: String!

  """
  The precision with which the `date` value is known.
  """
  precision: ReleaseDatePrecision!
}

enum ReleaseDatePrecision {
  YEAR
  MONTH
  DAY
}

"Spotify catalog information for a show."
type Show {
  "A description of the show."
  description(format: TextFormat = PLAIN): String!

  """
  Whether or not the show has explicit content (`true` = yes it does; `false`
  = no it does not OR unknown).
  """
  explicit: Boolean!

  "External URLs for this show."
  externalUrls: ExternalUrl!

  """
  A link to the Web API endpoint providing full details of the show.
  """
  href: String!

  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the show.
  """
  id: ID!

  """
  The cover art for the show in various sizes, widest first.
  """
  images: [Image!]!

  """
  `true` if all of the shows episodes are hosted outside of Spotify's CDN. This
  field might be `null` in some cases.
  """
  isExternallyHosted: Boolean

  """
  A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code.
  """
  languages: [String!]!

  """
  The media type of the show.
  """
  mediaType: String!

  """
  The name of the episode.
  """
  name: String!

  """
  The publisher of the show.
  """
  publisher: String!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the show.
  """
  uri: String!
}

enum TextFormat {
  PLAIN
  HTML
}

"Spotify catalog information for a track."
type Track implements PlaylistTrack {
  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for the track.
  """
  id: ID!

  """
  The album on which the track appears.
  """
  album: Album!

  "The artists who performed the track."
  artists: [Artist!]!

  """
  The disc number (usually `1` unless the album consists of more than one disc).
  """
  discNumber: Int!

  "The track length in milliseconds"
  durationMs: Int!

  """
  Whether or not the track has explicit lyrics (`true` = yes it does;
  `false` = no it does not OR unknown)
  """
  explicit: Boolean!

  """
  Known external IDs for the track.
  """
  externalIds: TrackExternalIds

  "Known external URLs for this track."
  externalUrls: ExternalUrl!

  """
  A link to the Web API endpoint providing full details of the track.
  """
  href: String!

  """
  Whether or not the track is from a local file.
  """
  isLocal: Boolean!

  """
  Part of the response when [Track Relinking](https://developer.spotify.com/documentation/general/guides/track-relinking-guide/)
  is applied. If `true`, the track is playable in the given market.
  Otherwise `false`.
  """
  isPlayable: Boolean!

  """
  The name of the track
  """
  name: String!

  """
  The popularity of the track. The value will be between 0 and 100, with 100
  being the most popular.

  The popularity of a track is a value between 0 and 100, with 100 being the
  most popular. The popularity is calculated by algorithm and is based, in the
  most part, on the total number of plays the track has had and how recent those
  plays are.

  Generally speaking, songs that are being played a lot now will have a higher
  popularity than songs that were played a lot in the past. Duplicate tracks
  (e.g. the same track from a single and an album) are rated independently.
  Artist and album popularity is derived mathematically from track popularity.
  Note: the popularity value may lag actual popularity by a few days: the value
  is not updated in real time.
  """
  popularity: Int!

  """
  A link to a 30 second preview (MP3 format) of the track. Can be `null`
  """
  previewUrl: String

  """
  The number of the track. If an album has several discs, the track number is
  the number on the specified disc.
  """
  trackNumber: Int

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the track.
  """
  uri: String!
}

type TrackExternalIds {
  """
  [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code)
  """
  isrc: String

  """
  [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29)
  """
  ean: String

  """
  [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code)
  """
  upc: String
}

"Public profile information about a Spotify user."
type User {
  """
  The [Spotify user ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for this user.
  """
  id: ID!

  """
  The name displayed on the user's profile. `null` if not available.
  """
  displayName: String

  """
  Known public external URLs for this user.
  """
  externalUrls: ExternalUrl!

  """
  Information about the followers of this user.
  """
  followers: Followers!

  """
  A link to the Web API endpoint for this user.
  """
  href: String!

  "The user's profile image."
  images: [Image!]

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for this user.
  """
  uri: String!
}

input RecommendationSeedInput {
  """
  A list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for seed artists. Up to 5 seed values may be provided in any combination of `seedArtists`, `seedTracks` and `seedGenres`.

  Example value: ["4NHQUGzhtTLFvgF5SZesLK"]
  """
  seedArtists: [ID!]

  """
  A list of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of `seedArtists`, `seedTracks` and `seedGenres`.

  Example value: ["classical", "country"]
  """
  seedGenres: [String!]

  """
  A list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for a seed track. Up to 5 seed values may be provided in any combination of
  `seedArtists`, `seedTracks` and `seedGenres`.

  Example value: ["0c6xIDDpzE81m2q797ordA"]
  """
  seedTracks: [ID!]

  """
  The target size of the list of recommended tracks. For seeds with unusually
  small pools or when highly restrictive filtering is applied, it may be
  impossible to generate the requested number of recommended tracks. Debugging
  information for such cases is available in the response.

  Default value: 20.
  Minimum value: 1.
  Maximum value: 100.
  """
  limit: Int
}
