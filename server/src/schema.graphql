type Query {
  genres: [String!]!
  recommendations(seeds: RecommendationSeedInput!): Recommendations
  me: User
}

type Artist {
  id: ID!
  externalUrls: [ExternalUrl!]!
  name: String!
  href: String!
  uri: String
}

type ExternalUrl {
  spotify: String
}

type Image {
  """
  The source URL of the image.
  """
  url: String!

  """
  The image height in pixels.
  """
  height: Int

  """
  The image width in pixels.
  """
  width: Int
}

type Playlist {
  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the playlist.
  """
  id: ID!

  """
  `true` if the owner allows other users to modify the playlist.
  """
  collaborative: Boolean!

  """
  Images for the playlist. The array may be empty or contain up to three images.
  The images are returned by size in descending order.
  See [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/).
  **Note**: If returned, the source URL for the image (`url`) is temporary and
  will expire in less than a day.
  """
  images: [Image!]

  """
  The name of the playlist.
  """
  name: String!

  """
  The user who owns the playlist.
  """
  owner: User!

  """
  The playlist's public/private status: `true` the playlist is public, `false`
  the playlist is private, `null` the playlist status is not relevant. For more
  about public/private status, see [Working with Playlists](https://developer.spotify.com/documentation/general/guides/working-with-playlists/)
  """
  public: Boolean

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) */
  for the playlist.
  """
  uri: String!
}

type Recommendations {
  seeds: [RecommendationSeed!]!
  tracks: [TrackSimplified!]!
}

type RecommendationSeed {
  id: ID!
  afterFilteringSize: Int!
  afterRelinkingSize: Int!
  href: String
  initialPoolSize: Int!
  type: RecommendationSeedType!
}

enum RecommendationSeedType {
  ARTIST
  TRACK
  GENRE
}

type TrackSimplified {
  id: ID!
  artists: [Artist!]!
  name: String!
}

type User {
  id: ID!
  displayName: String
  externalUrls: ExternalUrl!
  followers: UserFollowers!
  href: String!
  images: [Image!]!
  type: String!
  uri: String!
}

type UserFollowers {
  href: String
  total: Int!
}

input RecommendationSeedInput {
  """
  A list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids) for seed artists. Up to 5 seed values may be provided in any combination of `seedArtists`, `seedTracks` and `seedGenres`.

  Example value: ["4NHQUGzhtTLFvgF5SZesLK"]
  """
  seedArtists: [ID!]

  """
  A list of any genres in the set of available genre seeds. Up to 5 seed values may be provided in any combination of `seedArtists`, `seedTracks` and `seedGenres`.

  Example value: ["classical", "country"]
  """
  seedGenres: [String!]

  """
  A list of [Spotify IDs](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for a seed track. Up to 5 seed values may be provided in any combination of
  `seedArtists`, `seedTracks` and `seedGenres`.

  Example value: ["0c6xIDDpzE81m2q797ordA"]
  """
  seedTracks: [ID!]

  """
  The target size of the list of recommended tracks. For seeds with unusually
  small pools or when highly restrictive filtering is applied, it may be
  impossible to generate the requested number of recommended tracks. Debugging
  information for such cases is available in the response.

  Default value: 20.
  Minimum value: 1.
  Maximum value: 100.
  """
  limit: Int
}
