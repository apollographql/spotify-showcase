type Query {
  genres: [String!]!
  recommendations(seeds: RecommendationSeedInput!): Recommendations
  me: User
}

type Artist {
  id: ID!
  externalUrls: [ExternalUrl!]!
  name: String!
  href: String!
  uri: String
}

type ExternalUrl {
  spotify: String
}

type Recommendations {
  seeds: [RecommendationSeed!]!
  tracks: [TrackSimplified!]!
}

type RecommendationSeed {
  id: ID!
  afterFilteringSize: Int!
  afterRelinkingSize: Int!
  href: String
  initialPoolSize: Int!
  type: RecommendationSeedType!
}

enum RecommendationSeedType {
  ARTIST
  TRACK
  GENRE
}

type TrackSimplified {
  id: ID!
  artists: [Artist!]!
  name: String!
}

type User {
  id: ID!
  country: String
  displayName: String
  email: String!
  externalUrls: ExternalUrl!
  followers: UserFollowers!
  href: String!
  images: [UserProfileImage!]!
  product: String
  type: String!
  uri: String!
}

type UserFollowers {
  href: String
  total: Int!
}

type UserProfileImage {
  url: String!
  height: Int
  width: Int
}

input RecommendationSeedInput {
  seedGenres: [String!]
}
