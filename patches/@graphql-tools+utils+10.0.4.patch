diff --git a/node_modules/@graphql-tools/utils/esm/addTypes.js b/node_modules/@graphql-tools/utils/esm/addTypes.js
index 1d7c708..93b485f 100644
--- a/node_modules/@graphql-tools/utils/esm/addTypes.js
+++ b/node_modules/@graphql-tools/utils/esm/addTypes.js
@@ -25,7 +25,7 @@
 //
 // enhanceSchema can fill this gap by adding an additional round of rewiring.
 //
-import { GraphQLSchema, isDirective, isNamedType, } from 'graphql';
+import { GraphQLSchema, isDirective, isNamedType, } from 'graphql/index.mjs';
 import { getObjectTypeFromTypeMap } from './getObjectTypeFromTypeMap.js';
 import { rewireTypes } from './rewire.js';
 export function addTypes(schema, newTypesOrDirectives) {
diff --git a/node_modules/@graphql-tools/utils/esm/astFromType.js b/node_modules/@graphql-tools/utils/esm/astFromType.js
index 025547f..f9b8118 100644
--- a/node_modules/@graphql-tools/utils/esm/astFromType.js
+++ b/node_modules/@graphql-tools/utils/esm/astFromType.js
@@ -1,4 +1,4 @@
-import { isListType, isNonNullType, Kind } from 'graphql';
+import { isListType, isNonNullType, Kind } from 'graphql/index.mjs';
 import { inspect } from './inspect.js';
 export function astFromType(type) {
     if (isNonNullType(type)) {
diff --git a/node_modules/@graphql-tools/utils/esm/astFromValue.js b/node_modules/@graphql-tools/utils/esm/astFromValue.js
index 2edf8f6..61ac514 100644
--- a/node_modules/@graphql-tools/utils/esm/astFromValue.js
+++ b/node_modules/@graphql-tools/utils/esm/astFromValue.js
@@ -1,4 +1,4 @@
-import { isEnumType, isInputObjectType, isLeafType, isListType, isNonNullType, Kind, } from 'graphql';
+import { isEnumType, isInputObjectType, isLeafType, isListType, isNonNullType, Kind, } from 'graphql/index.mjs';
 import { astFromValueUntyped } from './astFromValueUntyped.js';
 import { inspect } from './inspect.js';
 import { isIterableObject, isObjectLike } from './jsutils.js';
diff --git a/node_modules/@graphql-tools/utils/esm/astFromValueUntyped.js b/node_modules/@graphql-tools/utils/esm/astFromValueUntyped.js
index 23e83f2..37a40a9 100644
--- a/node_modules/@graphql-tools/utils/esm/astFromValueUntyped.js
+++ b/node_modules/@graphql-tools/utils/esm/astFromValueUntyped.js
@@ -1,4 +1,4 @@
-import { Kind } from 'graphql';
+import { Kind } from 'graphql/index.mjs';
 /**
  * Produces a GraphQL Value AST given a JavaScript object.
  * Function will match JavaScript/JSON values to GraphQL AST schema format
diff --git a/node_modules/@graphql-tools/utils/esm/build-operation-for-field.js b/node_modules/@graphql-tools/utils/esm/build-operation-for-field.js
index 5f995ca..f181f2e 100644
--- a/node_modules/@graphql-tools/utils/esm/build-operation-for-field.js
+++ b/node_modules/@graphql-tools/utils/esm/build-operation-for-field.js
@@ -1,4 +1,4 @@
-import { getNamedType, isEnumType, isInterfaceType, isListType, isNonNullType, isObjectType, isScalarType, isUnionType, Kind, } from 'graphql';
+import { getNamedType, isEnumType, isInterfaceType, isListType, isNonNullType, isObjectType, isScalarType, isUnionType, Kind, } from 'graphql/index.mjs';
 import { getDefinedRootType, getRootTypeNames } from './rootTypes.js';
 let operationVariables = [];
 let fieldTypeMap = new Map();
diff --git a/node_modules/@graphql-tools/utils/esm/collectFields.js b/node_modules/@graphql-tools/utils/esm/collectFields.js
index 3e9d573..160fc4f 100644
--- a/node_modules/@graphql-tools/utils/esm/collectFields.js
+++ b/node_modules/@graphql-tools/utils/esm/collectFields.js
@@ -1,4 +1,4 @@
-import { getDirectiveValues, GraphQLIncludeDirective, GraphQLSkipDirective, isAbstractType, Kind, typeFromAST, } from 'graphql';
+import { getDirectiveValues, GraphQLIncludeDirective, GraphQLSkipDirective, isAbstractType, Kind, typeFromAST, } from 'graphql/index.mjs';
 import { AccumulatorMap } from './AccumulatorMap.js';
 import { GraphQLDeferDirective } from './directives.js';
 import { memoize5 } from './memoize.js';
diff --git a/node_modules/@graphql-tools/utils/esm/comments.js b/node_modules/@graphql-tools/utils/esm/comments.js
index 1477eee..83342cd 100644
--- a/node_modules/@graphql-tools/utils/esm/comments.js
+++ b/node_modules/@graphql-tools/utils/esm/comments.js
@@ -1,4 +1,4 @@
-import { TokenKind, visit, } from 'graphql';
+import { TokenKind, visit, } from 'graphql/index.mjs';
 const MAX_LINE_LENGTH = 80;
 let commentsRegistry = {};
 export function resetComments() {
diff --git a/node_modules/@graphql-tools/utils/esm/directives.js b/node_modules/@graphql-tools/utils/esm/directives.js
index 9b4bb9f..40182f9 100644
--- a/node_modules/@graphql-tools/utils/esm/directives.js
+++ b/node_modules/@graphql-tools/utils/esm/directives.js
@@ -1,4 +1,4 @@
-import { DirectiveLocation, GraphQLBoolean, GraphQLDirective, GraphQLInt, GraphQLNonNull, GraphQLString, } from 'graphql';
+import { DirectiveLocation, GraphQLBoolean, GraphQLDirective, GraphQLInt, GraphQLNonNull, GraphQLString, } from 'graphql/index.mjs';
 /**
  * Used to conditionally defer fragments.
  */
diff --git a/node_modules/@graphql-tools/utils/esm/errors.js b/node_modules/@graphql-tools/utils/esm/errors.js
index 728db8c..d2f0c15 100644
--- a/node_modules/@graphql-tools/utils/esm/errors.js
+++ b/node_modules/@graphql-tools/utils/esm/errors.js
@@ -1,4 +1,4 @@
-import { GraphQLError, versionInfo } from 'graphql';
+import { GraphQLError, versionInfo } from 'graphql/index.mjs';
 export function createGraphQLError(message, options) {
     if (versionInfo.major >= 17) {
         return new GraphQLError(message, options);
diff --git a/node_modules/@graphql-tools/utils/esm/fields.js b/node_modules/@graphql-tools/utils/esm/fields.js
index 5f76444..aacf2af 100644
--- a/node_modules/@graphql-tools/utils/esm/fields.js
+++ b/node_modules/@graphql-tools/utils/esm/fields.js
@@ -1,4 +1,4 @@
-import { GraphQLObjectType, } from 'graphql';
+import { GraphQLObjectType, } from 'graphql/index.mjs';
 import { addTypes } from './addTypes.js';
 import { MapperKind } from './Interfaces.js';
 import { correctASTNodes, mapSchema } from './mapSchema.js';
diff --git a/node_modules/@graphql-tools/utils/esm/filterSchema.js b/node_modules/@graphql-tools/utils/esm/filterSchema.js
index ad6c765..0c33345 100644
--- a/node_modules/@graphql-tools/utils/esm/filterSchema.js
+++ b/node_modules/@graphql-tools/utils/esm/filterSchema.js
@@ -1,4 +1,4 @@
-import { GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, } from 'graphql';
+import { GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, } from 'graphql/index.mjs';
 import { MapperKind, } from './Interfaces.js';
 import { mapSchema } from './mapSchema.js';
 export function filterSchema({ schema, typeFilter = () => true, fieldFilter = undefined, rootFieldFilter = undefined, objectFieldFilter = undefined, interfaceFieldFilter = undefined, inputObjectFieldFilter = undefined, argumentFilter = undefined, }) {
diff --git a/node_modules/@graphql-tools/utils/esm/fixSchemaAst.js b/node_modules/@graphql-tools/utils/esm/fixSchemaAst.js
index 4d698be..ae33bfc 100644
--- a/node_modules/@graphql-tools/utils/esm/fixSchemaAst.js
+++ b/node_modules/@graphql-tools/utils/esm/fixSchemaAst.js
@@ -1,4 +1,4 @@
-import { buildASTSchema } from 'graphql';
+import { buildASTSchema } from 'graphql/index.mjs';
 import { getDocumentNodeFromSchema } from './print-schema-with-directives.js';
 function buildFixedSchema(schema, options) {
     const document = getDocumentNodeFromSchema(schema);
diff --git a/node_modules/@graphql-tools/utils/esm/forEachDefaultValue.js b/node_modules/@graphql-tools/utils/esm/forEachDefaultValue.js
index 7a42c19..5bb643e 100644
--- a/node_modules/@graphql-tools/utils/esm/forEachDefaultValue.js
+++ b/node_modules/@graphql-tools/utils/esm/forEachDefaultValue.js
@@ -1,4 +1,4 @@
-import { getNamedType, isInputObjectType, isObjectType } from 'graphql';
+import { getNamedType, isInputObjectType, isObjectType } from 'graphql/index.mjs';
 export function forEachDefaultValue(schema, fn) {
     const typeMap = schema.getTypeMap();
     for (const typeName in typeMap) {
diff --git a/node_modules/@graphql-tools/utils/esm/forEachField.js b/node_modules/@graphql-tools/utils/esm/forEachField.js
index 8132581..ead4dd2 100644
--- a/node_modules/@graphql-tools/utils/esm/forEachField.js
+++ b/node_modules/@graphql-tools/utils/esm/forEachField.js
@@ -1,4 +1,4 @@
-import { getNamedType, isObjectType } from 'graphql';
+import { getNamedType, isObjectType } from 'graphql/index.mjs';
 export function forEachField(schema, fn) {
     const typeMap = schema.getTypeMap();
     for (const typeName in typeMap) {
diff --git a/node_modules/@graphql-tools/utils/esm/get-arguments-with-directives.js b/node_modules/@graphql-tools/utils/esm/get-arguments-with-directives.js
index 94a8bc6..0f3e177 100644
--- a/node_modules/@graphql-tools/utils/esm/get-arguments-with-directives.js
+++ b/node_modules/@graphql-tools/utils/esm/get-arguments-with-directives.js
@@ -1,4 +1,4 @@
-import { Kind, valueFromASTUntyped, } from 'graphql';
+import { Kind, valueFromASTUntyped, } from 'graphql/index.mjs';
 function isTypeWithFields(t) {
     return t.kind === Kind.OBJECT_TYPE_DEFINITION || t.kind === Kind.OBJECT_TYPE_EXTENSION;
 }
diff --git a/node_modules/@graphql-tools/utils/esm/get-fields-with-directives.js b/node_modules/@graphql-tools/utils/esm/get-fields-with-directives.js
index c8c9b62..8c489ee 100644
--- a/node_modules/@graphql-tools/utils/esm/get-fields-with-directives.js
+++ b/node_modules/@graphql-tools/utils/esm/get-fields-with-directives.js
@@ -1,4 +1,4 @@
-import { valueFromASTUntyped, } from 'graphql';
+import { valueFromASTUntyped, } from 'graphql/index.mjs';
 export function getFieldsWithDirectives(documentNode, options = {}) {
     const result = {};
     let selected = ['ObjectTypeDefinition', 'ObjectTypeExtension'];
diff --git a/node_modules/@graphql-tools/utils/esm/get-implementing-types.js b/node_modules/@graphql-tools/utils/esm/get-implementing-types.js
index 9b0cfe3..93ba914 100644
--- a/node_modules/@graphql-tools/utils/esm/get-implementing-types.js
+++ b/node_modules/@graphql-tools/utils/esm/get-implementing-types.js
@@ -1,4 +1,4 @@
-import { isObjectType } from 'graphql';
+import { isObjectType } from 'graphql/index.mjs';
 export function getImplementingTypes(interfaceName, schema) {
     const allTypesMap = schema.getTypeMap();
     const result = [];
diff --git a/node_modules/@graphql-tools/utils/esm/getArgumentValues.js b/node_modules/@graphql-tools/utils/esm/getArgumentValues.js
index 444402f..bfa9e94 100644
--- a/node_modules/@graphql-tools/utils/esm/getArgumentValues.js
+++ b/node_modules/@graphql-tools/utils/esm/getArgumentValues.js
@@ -1,4 +1,4 @@
-import { isNonNullType, Kind, print, valueFromAST, } from 'graphql';
+import { isNonNullType, Kind, print, valueFromAST, } from 'graphql/index.mjs';
 import { createGraphQLError } from './errors.js';
 import { inspect } from './inspect.js';
 import { hasOwnProperty } from './jsutils.js';
diff --git a/node_modules/@graphql-tools/utils/esm/getObjectTypeFromTypeMap.js b/node_modules/@graphql-tools/utils/esm/getObjectTypeFromTypeMap.js
index ed471fc..4b8a1ed 100644
--- a/node_modules/@graphql-tools/utils/esm/getObjectTypeFromTypeMap.js
+++ b/node_modules/@graphql-tools/utils/esm/getObjectTypeFromTypeMap.js
@@ -1,4 +1,4 @@
-import { isObjectType } from 'graphql';
+import { isObjectType } from 'graphql/index.mjs';
 export function getObjectTypeFromTypeMap(typeMap, type) {
     if (type) {
         const maybeObjectType = typeMap[type.name];
diff --git a/node_modules/@graphql-tools/utils/esm/getOperationASTFromRequest.js b/node_modules/@graphql-tools/utils/esm/getOperationASTFromRequest.js
index bcb79bb..0aa3b00 100644
--- a/node_modules/@graphql-tools/utils/esm/getOperationASTFromRequest.js
+++ b/node_modules/@graphql-tools/utils/esm/getOperationASTFromRequest.js
@@ -1,4 +1,4 @@
-import { getOperationAST } from 'graphql';
+import { getOperationAST } from 'graphql/index.mjs';
 import { memoize1 } from './memoize.js';
 export function getOperationASTFromDocument(documentNode, operationName) {
     const doc = getOperationAST(documentNode, operationName);
diff --git a/node_modules/@graphql-tools/utils/esm/getResolversFromSchema.js b/node_modules/@graphql-tools/utils/esm/getResolversFromSchema.js
index 7310a12..836cd06 100644
--- a/node_modules/@graphql-tools/utils/esm/getResolversFromSchema.js
+++ b/node_modules/@graphql-tools/utils/esm/getResolversFromSchema.js
@@ -1,4 +1,4 @@
-import { GraphQLScalarType, isEnumType, isInterfaceType, isObjectType, isScalarType, isSpecifiedScalarType, isUnionType, } from 'graphql';
+import { GraphQLScalarType, isEnumType, isInterfaceType, isObjectType, isScalarType, isSpecifiedScalarType, isUnionType, } from 'graphql/index.mjs';
 export function getResolversFromSchema(schema, 
 // Include default merged resolvers
 includeDefaultMergedResolver) {
diff --git a/node_modules/@graphql-tools/utils/esm/heal.js b/node_modules/@graphql-tools/utils/esm/heal.js
index 629d69c..a9c42d0 100644
--- a/node_modules/@graphql-tools/utils/esm/heal.js
+++ b/node_modules/@graphql-tools/utils/esm/heal.js
@@ -1,4 +1,4 @@
-import { GraphQLList, GraphQLNonNull, isInputObjectType, isInterfaceType, isLeafType, isListType, isNamedType, isNonNullType, isObjectType, isUnionType, } from 'graphql';
+import { GraphQLList, GraphQLNonNull, isInputObjectType, isInterfaceType, isLeafType, isListType, isNamedType, isNonNullType, isObjectType, isUnionType, } from 'graphql/index.mjs';
 // Update any references to named schema types that disagree with the named
 // types found in schema.getTypeMap().
 //
diff --git a/node_modules/@graphql-tools/utils/esm/helpers.js b/node_modules/@graphql-tools/utils/esm/helpers.js
index 6eda4e5..43d86a2 100644
--- a/node_modules/@graphql-tools/utils/esm/helpers.js
+++ b/node_modules/@graphql-tools/utils/esm/helpers.js
@@ -1,4 +1,4 @@
-import { parse } from 'graphql';
+import { parse } from 'graphql/index.mjs';
 export const asArray = (fns) => (Array.isArray(fns) ? fns : fns ? [fns] : []);
 const invalidDocRegex = /\.[a-z0-9]+$/i;
 export function isDocumentString(str) {
diff --git a/node_modules/@graphql-tools/utils/esm/implementsAbstractType.js b/node_modules/@graphql-tools/utils/esm/implementsAbstractType.js
index 044253a..f91c76e 100644
--- a/node_modules/@graphql-tools/utils/esm/implementsAbstractType.js
+++ b/node_modules/@graphql-tools/utils/esm/implementsAbstractType.js
@@ -1,4 +1,4 @@
-import { doTypesOverlap, isCompositeType } from 'graphql';
+import { doTypesOverlap, isCompositeType } from 'graphql/index.mjs';
 export function implementsAbstractType(schema, typeA, typeB) {
     if (typeB == null || typeA == null) {
         return false;
diff --git a/node_modules/@graphql-tools/utils/esm/inspect.js b/node_modules/@graphql-tools/utils/esm/inspect.js
index 87ffc30..8b5dc18 100644
--- a/node_modules/@graphql-tools/utils/esm/inspect.js
+++ b/node_modules/@graphql-tools/utils/esm/inspect.js
@@ -1,6 +1,6 @@
 // Taken from graphql-js
 // https://github.com/graphql/graphql-js/blob/main/src/jsutils/inspect.ts
-import { GraphQLError } from 'graphql';
+import { GraphQLError } from 'graphql/index.mjs';
 const MAX_RECURSIVE_DEPTH = 3;
 /**
  * Used to print values in error messages.
diff --git a/node_modules/@graphql-tools/utils/esm/isDocumentNode.js b/node_modules/@graphql-tools/utils/esm/isDocumentNode.js
index 5b8e83a..c7f987a 100644
--- a/node_modules/@graphql-tools/utils/esm/isDocumentNode.js
+++ b/node_modules/@graphql-tools/utils/esm/isDocumentNode.js
@@ -1,4 +1,4 @@
-import { Kind } from 'graphql';
+import { Kind } from 'graphql/index.mjs';
 export function isDocumentNode(object) {
     return object && typeof object === 'object' && 'kind' in object && object.kind === Kind.DOCUMENT;
 }
diff --git a/node_modules/@graphql-tools/utils/esm/mapSchema.js b/node_modules/@graphql-tools/utils/esm/mapSchema.js
index f39f92e..fbdd810 100644
--- a/node_modules/@graphql-tools/utils/esm/mapSchema.js
+++ b/node_modules/@graphql-tools/utils/esm/mapSchema.js
@@ -1,4 +1,4 @@
-import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLSchema, isEnumType, isInputObjectType, isInterfaceType, isLeafType, isListType, isNamedType, isNonNullType, isObjectType, isScalarType, isUnionType, Kind, } from 'graphql';
+import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLSchema, isEnumType, isInputObjectType, isInterfaceType, isLeafType, isListType, isNamedType, isNonNullType, isObjectType, isScalarType, isUnionType, Kind, } from 'graphql/index.mjs';
 import { getObjectTypeFromTypeMap } from './getObjectTypeFromTypeMap.js';
 import { MapperKind, } from './Interfaces.js';
 import { rewireTypes } from './rewire.js';
diff --git a/node_modules/@graphql-tools/utils/esm/parse-graphql-json.js b/node_modules/@graphql-tools/utils/esm/parse-graphql-json.js
index 6c53157..5d78356 100644
--- a/node_modules/@graphql-tools/utils/esm/parse-graphql-json.js
+++ b/node_modules/@graphql-tools/utils/esm/parse-graphql-json.js
@@ -1,4 +1,4 @@
-import { buildClientSchema } from 'graphql';
+import { buildClientSchema } from 'graphql/index.mjs';
 function stripBOM(content) {
     content = content.toString();
     // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
diff --git a/node_modules/@graphql-tools/utils/esm/parse-graphql-sdl.js b/node_modules/@graphql-tools/utils/esm/parse-graphql-sdl.js
index ad3d412..c2ddc73 100644
--- a/node_modules/@graphql-tools/utils/esm/parse-graphql-sdl.js
+++ b/node_modules/@graphql-tools/utils/esm/parse-graphql-sdl.js
@@ -1,4 +1,4 @@
-import { Source as GraphQLSource, isTypeSystemDefinitionNode, Kind, parse, print, visit, } from 'graphql';
+import { Source as GraphQLSource, isTypeSystemDefinitionNode, Kind, parse, print, visit, } from 'graphql/index.mjs';
 import { dedentBlockStringValue, getLeadingCommentBlock } from './comments.js';
 export function parseGraphQLSDL(location, rawSDL, options = {}) {
     let document;
diff --git a/node_modules/@graphql-tools/utils/esm/print-schema-with-directives.js b/node_modules/@graphql-tools/utils/esm/print-schema-with-directives.js
index ceb9de7..c5d831d 100644
--- a/node_modules/@graphql-tools/utils/esm/print-schema-with-directives.js
+++ b/node_modules/@graphql-tools/utils/esm/print-schema-with-directives.js
@@ -1,4 +1,4 @@
-import { GraphQLDeprecatedDirective, isEnumType, isInputObjectType, isInterfaceType, isIntrospectionType, isObjectType, isScalarType, isSpecifiedDirective, isSpecifiedScalarType, isUnionType, Kind, print, } from 'graphql';
+import { GraphQLDeprecatedDirective, isEnumType, isInputObjectType, isInterfaceType, isIntrospectionType, isObjectType, isScalarType, isSpecifiedDirective, isSpecifiedScalarType, isUnionType, Kind, print, } from 'graphql/index.mjs';
 import { astFromType } from './astFromType.js';
 import { astFromValue } from './astFromValue.js';
 import { astFromValueUntyped } from './astFromValueUntyped.js';
diff --git a/node_modules/@graphql-tools/utils/esm/prune.js b/node_modules/@graphql-tools/utils/esm/prune.js
index 6c8c136..62ba941 100644
--- a/node_modules/@graphql-tools/utils/esm/prune.js
+++ b/node_modules/@graphql-tools/utils/esm/prune.js
@@ -1,4 +1,4 @@
-import { getNamedType, isEnumType, isInputObjectType, isInterfaceType, isObjectType, isScalarType, isSpecifiedScalarType, isUnionType, } from 'graphql';
+import { getNamedType, isEnumType, isInputObjectType, isInterfaceType, isObjectType, isScalarType, isSpecifiedScalarType, isUnionType, } from 'graphql/index.mjs';
 import { getImplementingTypes } from './get-implementing-types.js';
 import { MapperKind } from './Interfaces.js';
 import { mapSchema } from './mapSchema.js';
diff --git a/node_modules/@graphql-tools/utils/esm/renameType.js b/node_modules/@graphql-tools/utils/esm/renameType.js
index a9cc3cd..6e9cdd9 100644
--- a/node_modules/@graphql-tools/utils/esm/renameType.js
+++ b/node_modules/@graphql-tools/utils/esm/renameType.js
@@ -1,4 +1,4 @@
-import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isObjectType, isScalarType, isUnionType, } from 'graphql';
+import { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isObjectType, isScalarType, isUnionType, } from 'graphql/index.mjs';
 export function renameType(type, newTypeName) {
     if (isObjectType(type)) {
         return new GraphQLObjectType({
diff --git a/node_modules/@graphql-tools/utils/esm/rewire.js b/node_modules/@graphql-tools/utils/esm/rewire.js
index 55891ab..bce644c 100644
--- a/node_modules/@graphql-tools/utils/esm/rewire.js
+++ b/node_modules/@graphql-tools/utils/esm/rewire.js
@@ -1,4 +1,4 @@
-import { GraphQLDirective, GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isListType, isNamedType, isNonNullType, isObjectType, isScalarType, isSpecifiedDirective, isSpecifiedScalarType, isUnionType, } from 'graphql';
+import { GraphQLDirective, GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isListType, isNamedType, isNonNullType, isObjectType, isScalarType, isSpecifiedDirective, isSpecifiedScalarType, isUnionType, } from 'graphql/index.mjs';
 import { getBuiltInForStub, isNamedStub } from './stub.js';
 export function rewireTypes(originalTypeMap, directives) {
     const referenceTypeMap = Object.create(null);
diff --git a/node_modules/@graphql-tools/utils/esm/selectionSets.js b/node_modules/@graphql-tools/utils/esm/selectionSets.js
index 9b3f836..f4922ef 100644
--- a/node_modules/@graphql-tools/utils/esm/selectionSets.js
+++ b/node_modules/@graphql-tools/utils/esm/selectionSets.js
@@ -1,4 +1,4 @@
-import { parse } from 'graphql';
+import { parse } from 'graphql/index.mjs';
 export function parseSelectionSet(selectionSet, options) {
     const query = parse(selectionSet, options).definitions[0];
     return query.selectionSet;
diff --git a/node_modules/@graphql-tools/utils/esm/stub.js b/node_modules/@graphql-tools/utils/esm/stub.js
index caab56d..df0df00 100644
--- a/node_modules/@graphql-tools/utils/esm/stub.js
+++ b/node_modules/@graphql-tools/utils/esm/stub.js
@@ -1,4 +1,4 @@
-import { GraphQLBoolean, GraphQLFloat, GraphQLID, GraphQLInputObjectType, GraphQLInt, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString, Kind, } from 'graphql';
+import { GraphQLBoolean, GraphQLFloat, GraphQLID, GraphQLInputObjectType, GraphQLInt, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString, Kind, } from 'graphql/index.mjs';
 export function createNamedStub(name, type) {
     let constructor;
     if (type === 'object') {
diff --git a/node_modules/@graphql-tools/utils/esm/transformInputValue.js b/node_modules/@graphql-tools/utils/esm/transformInputValue.js
index 23d57d7..0f780a2 100644
--- a/node_modules/@graphql-tools/utils/esm/transformInputValue.js
+++ b/node_modules/@graphql-tools/utils/esm/transformInputValue.js
@@ -1,4 +1,4 @@
-import { getNullableType, isInputObjectType, isLeafType, isListType, } from 'graphql';
+import { getNullableType, isInputObjectType, isLeafType, isListType, } from 'graphql/index.mjs';
 import { asArray } from './helpers.js';
 export function transformInputValue(type, value, inputLeafValueTransformer = null, inputObjectValueTransformer = null) {
     if (value == null) {
diff --git a/node_modules/@graphql-tools/utils/esm/updateArgument.js b/node_modules/@graphql-tools/utils/esm/updateArgument.js
index 06dc8e9..33f08ff 100644
--- a/node_modules/@graphql-tools/utils/esm/updateArgument.js
+++ b/node_modules/@graphql-tools/utils/esm/updateArgument.js
@@ -1,4 +1,4 @@
-import { Kind } from 'graphql';
+import { Kind } from 'graphql/index.mjs';
 import { astFromType } from './astFromType.js';
 export function updateArgument(argumentNodes, variableDefinitionsMap, variableValues, argName, varName, type, value) {
     argumentNodes[argName] = {
diff --git a/node_modules/@graphql-tools/utils/esm/validate-documents.js b/node_modules/@graphql-tools/utils/esm/validate-documents.js
index ae02e54..0167fc7 100644
--- a/node_modules/@graphql-tools/utils/esm/validate-documents.js
+++ b/node_modules/@graphql-tools/utils/esm/validate-documents.js
@@ -1,4 +1,4 @@
-import { Kind, specifiedRules, validate, versionInfo, } from 'graphql';
+import { Kind, specifiedRules, validate, versionInfo, } from 'graphql/index.mjs';
 export function validateGraphQlDocuments(schema, documents, rules = createDefaultRules()) {
     const definitionMap = new Map();
     for (const document of documents) {
diff --git a/node_modules/@graphql-tools/utils/esm/visitResult.js b/node_modules/@graphql-tools/utils/esm/visitResult.js
index 044beb9..e2e9fe9 100644
--- a/node_modules/@graphql-tools/utils/esm/visitResult.js
+++ b/node_modules/@graphql-tools/utils/esm/visitResult.js
@@ -1,4 +1,4 @@
-import { getNullableType, isAbstractType, isListType, isObjectType, Kind, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, } from 'graphql';
+import { getNullableType, isAbstractType, isListType, isObjectType, Kind, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, } from 'graphql/index.mjs';
 import { collectFields, collectSubFields } from './collectFields.js';
 import { getOperationASTFromRequest } from './getOperationASTFromRequest.js';
 export function visitData(data, enter, leave) {
