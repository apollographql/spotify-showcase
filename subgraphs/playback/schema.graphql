# @contact isn't being printed to the generated-schema.graphql file
# See https://github.com/apollographql/federation/issues/1847
directive @contact(
  "Contact title of the subgraph owner"
  name: String!
  "URL where the subgraph's owner can be reached"
  url: String
  "Other relevant notes can be included here; supports markdown links"
  description: String
) on SCHEMA

directive @synthetics(
  """
  The synthetic timeout configured for the field.
  """
  timeout: Int!

  """
  The synthetic error rate configured for the field.
  """
  errorRate: ErrorRate!

  """
  Enable or disable synthetics for the field.
  """
  enabled: Boolean = true
) on FIELD

extend schema
  @contact(
    name: "Playback Subscription Subgraph"
    url: "https://discord.gg/graphos"
    description: "Ask questions in our Discord or [open an issue](https://github.com/apollographql/spotify-showcase/issues)."
  )
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: ["@key", "@shareable", "@interfaceObject"]
  )

scalar Timestamp

type Mutation {
  """
  Start a new context or resume current playback on the user's active device.
  """
  resumePlayback(input: ResumePlaybackInput): ResumePlaybackPayload
  """
  Pause playback on the user's account.
  """
  pausePlayback(
    """
    Additional context when pausing playback. Omit to pause playback on the
    current device.
    """
    context: PausePlaybackContextInput
  ): PausePlaybackResponse

  """
  Seeks to the given position in the user’s currently playing track.
  """
  seekToPosition(
    """
    The position in milliseconds to seek to. Must be a positive number. Passing
    in a position that is greater than the length of the track will cause the
    player to start playing the next song.
    """
    positionMs: Int!

    """
    Additional context to determine the device where the action should occur.
    """
    context: SeekToPositionContextInput
  ): SeekToPositionResponse

  """
  Set the repeat mode for the user's playback.
  """
  setRepeatMode(
    """
    `track`, `context` or `off`.
    `track` will repeat the current track.
    `context` will repeat the current context.
    `off` will turn repeat off.
    """
    state: RepeatMode!

    """
    Additional context to determine the device where the action should occur.
    """
    context: SetRepeatModeContextInput
  ): SetRepeatModeResponse

  """
  Set the volume for the user’s current playback device.
  """
  setVolume(
    "The volume to set. Must be a value from 0 to 100 inclusive."
    volumePercent: Int!

    """
    Additional context to determine the device where the action should occur.
    """
    context: SetVolumeContextInput
  ): SetVolumeResponse

  """
  Toggle shuffle on or off for user’s playback.
  """
  shufflePlayback(
    """
    `true`: Shuffle user's playback.
    `false`: Do not shuffle user's playback.
    """
    state: Boolean!

    """
    Additional context to determine the device where the action should occur.
    """
    context: ShufflePlaybackContextInput
  ): ShufflePlaybackResponse

  """
  Skips to next track in the user’s queue.
  """
  skipToNext(
    """
    Additional context to determine the device where the action should occur.
    """
    context: SkipToNextContextInput
  ): SkipToNextResponse

  """
  Skips to previous track in the user’s queue.
  """
  skipToPrevious(context: SkipToPreviousContextInput): SkipToPreviousResponse

  """
  Transfer playback to a new device and determine if it should start playing.
  """
  transferPlayback(input: TransferPlaybackInput!): TransferPlaybackPayload
}

type SetRepeatModeResponse {
  "The updated state of playback after setting a repeat mode."
  playbackState: PlaybackState
}

input SetRepeatModeContextInput {
  """
  The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
  """
  deviceId: ID
}

input ShufflePlaybackContextInput {
  """
  The id of the device this command is targeting. If not supplied, the user's
  currently active device is the target.
  """
  deviceId: ID
}

type ShufflePlaybackResponse {
  "The state of playback after shuffling playback."
  playbackState: PlaybackState
}

input SkipToNextContextInput {
  """
  The id of the device this command is targeting. If not supplied, the user's
  currently active device is the target.
  """
  deviceId: ID
}

type SkipToNextResponse {
  "The updated state of playback after skipping to next."
  playbackState: PlaybackState
}

input SkipToPreviousContextInput {
  """
  The id of the device this command is targeting. If not supplied, the user's
  currently active device is the target.
  """
  deviceId: ID
}

type SkipToPreviousResponse {
  "The updated state of playback after skipping to previous."
  playbackState: PlaybackState
}

input TransferPlaybackInput {
  """
  A list containing the ID of the device on which playback should be
  started/transferred.
  """
  deviceIds: [ID!]!

  """
  `true`: ensure playback happens on new device.
  `false` or not provided: keep the current playback state.
  """
  play: Boolean
}

type TransferPlaybackPayload {
  "The state of playback after transferring devices."
  playbackState: PlaybackState
}

input SetVolumeContextInput {
  "The id of the device this command is targeting. If not supplied, the user's currently active device is the target."
  deviceId: ID
}

type SetVolumeResponse {
  "The state of playback after the volume has been set."
  playbackState: PlaybackState
}

input SeekToPositionContextInput {
  """
  The id of the device this command is targeting. If not supplied, the user's currently active device is the target.
  """
  deviceId: ID
}

type SeekToPositionResponse {
  "The updated state of playback after seeking to a position."
  playbackState: PlaybackState
}

input PausePlaybackContextInput {
  """
  The id of the device this command is targeting. If not supplied, the user's
  currently active device is the target.
  """
  deviceId: String
}

type PausePlaybackResponse {
  """
  The updated playback state
  """
  playbackState: PlaybackState
}

input ResumePlaybackInput {
  """
  Spotify URI of the context to play. Valid contexts are albums, artists &
  playlists.
  """
  contextUri: String

  """
  The id of the device this command is targeting. If not supplied, the user's
  currently active device is the target.
  """
  deviceId: ID

  """
  Indicates from where in the context playback should start. Only available when
  contextUri corresponds to an album or playlist object.
  """
  offset: ResumePlaybackOffsetInput

  "Indicates the position where playback should occur in milliseconds."
  positionMs: Int

  """
  An array of the Spotify track URIs to play.
  """
  uris: [String!]
}

input ResumePlaybackOffsetInput {
  """
  Non-negative, zero-based value that corresponds to the numeric position in the
  album or playlist
  """
  position: Int

  """
  Spotify URI of the item in the album or playlist
  """
  uri: String
}

type ResumePlaybackPayload {
  playbackState: PlaybackState
}

type Subscription {
  playbackStateChanged: PlaybackState
}

enum Action {
  INTERRUPTING_PLAYBACK
  PAUSING
  RESUMING
  SEEKING
  SKIPPING_NEXT
  SKIPPING_PREV
  TOGGLING_REPEAT_CONTEXT
  TOGGLING_SHUFFLE
  TOGGLING_REPEAT_TRACK
  TRANSFERRING_PLAYBACK
}

type Actions @shareable {
  disallows: [Action!]!
}
type Device @shareable {
  "The device ID"
  id: ID

  "If this device is the currently active device."
  isActive: Boolean!

  "If this device is currently in a private session."
  isPrivateSession: Boolean!

  """
  Whether controlling this device is restricted. At present if this is "true",
  then no Web API commands will be accepted by this device.
  """
  isRestricted: Boolean!

  """
  A human-readable name for the device. Some devices have a name that the user
  can configure (e.g. "Loudest speaker") and some devices have a generic name
  associated with the manufacturer or device model.
  """
  name: String!

  """
  Device type, such as "computer", "smartphone" or "speaker".
  """
  type: String!

  """
  The current volume in percent.

  >= 0    <= 100
  """
  volumePercent: Int!
}
type PlaybackState @shareable {
  """
  Allows to update the user interface based on which playback actions are
  available within the current context.
  """
  actions: Actions!

  "A context object."
  context: PlaybackContext

  "The device that is currently active."
  device: Device!

  "If something is currently playing, return `true`."
  isPlaying: Boolean!

  "The currently playing track or episode"
  item: PlaybackItem

  "Progress into the currently playing track or episode. Can be `null`"
  progressMs: Int

  "off, track, context"
  repeatState: RepeatMode!

  "If shuffle is on or off."
  shuffleState: Boolean!

  "Unix Millisecond Timestamp when data was fetched."
  timestamp: Timestamp!
}

type PlaybackContext @shareable {
  """
  A link to the Web API endpoint providing full details of the track.
  """
  href: String!

  """
  The object type, e.g. "artist", "playlist", "album", "show".
  """
  type: PlaybackContextType!

  """
  External URLs for this context.
  """
  externalUrls: ExternalUrl!

  """
  The [Spotify URI](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the context.
  """
  uri: String!
}

enum PlaybackContextType {
  ALBUM
  ARTIST
  AUDIO_FEATURES
  COLLECTION
  COLLECTION_YOUR_EPISODES
  EPISODE
  GENRE
  PLAYLIST
  SHOW
  TRACK
  USER
}
type PlaybackItem @key(fields: "id") @interfaceObject {
  """
  The [Spotify ID](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the playback item.
  """
  id: ID!
}
enum RepeatMode {
  CONTEXT
  OFF
  TRACK
}
type ExternalUrl @shareable {
  """
  The [Spotify URL](https://developer.spotify.com/documentation/web-api/#spotify-uris-and-ids)
  for the object.
  """
  spotify: String
}
